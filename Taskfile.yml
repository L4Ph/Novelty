version: '3'

vars:
  # geminiに渡すプロンプトのテンプレート。
  # {{.COMMIT_LOG}} の部分は、releaseタスク内で動的に生成されたコミットログに置き換えられる。
  PROMPT_TEMPLATE: |
    あなたはエンジニアです。
    以下のgitのコミットログを元に、ユーザー向けの分かりやすいリリースノートを作成してください。

    # 指示
    - [Keep a Changelog](http://keepachangelog.com/)に従った記述を行ってください。
      - Added 新機能
      - Changed 既存機能の変更
      - Deprecated 将来的に削除される機能
      - Removed 削除された機能
      - Fixed バグフィックス
      - Security 脆弱性修正のためユーザーにアップデートを促す場合
      上記でグルーピングされている


    --- コミットログ ---
    {{.COMMIT_LOG}}
    --- コミットログ終 ---

tasks:
  release:
    desc: "バージョンを更新し、Androidリリースを作成します。引数: BUMP=<patch|minor|major> [NOTES=<...>]
    summary: |
      使い方:
        task release -- BUMP=patch
        task release -- BUMP=minor --NOTES "UIの改善が中心です。"
    cmds:
      - |
        if [ -z "{{.BUMP}}" ] || { [ "{{.BUMP}}" != "patch" ] && [ "{{.BUMP}}" != "minor" ] && [ "{{.BUMP}}" != "major" ]; }; then
          echo "エラー: 引数 BUMP が未指定か、値が不正です。"
          echo "使い方: task release -- BUMP=<patch|minor|major>"
          exit 1
        fi

        # 環境構築
        curl -fsSL https://fvm.app/install.sh | bash
        fvm install

        # 1. バージョン計算
        FULL_VERSION=$(yq '.version' pubspec.yaml)
        CURRENT_VERSION=$(echo $FULL_VERSION | cut -d'+' -f1)
        CURRENT_BUILD=$(echo $FULL_VERSION | cut -d'+' -f2)
        MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1); MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2); PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
        case "{{.BUMP}}" in
          major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
          minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
          patch) PATCH=$((PATCH + 1)) ;;
        esac
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_BUILD=$((CURRENT_BUILD + 1))
        NEW_FULL_VERSION="$NEW_VERSION+$NEW_BUILD"
        TAG="v$NEW_VERSION"
        echo "バージョンを $CURRENT_VERSION -> $NEW_VERSION に更新します (ビルド: $NEW_BUILD)"

        # 2. pubspec.yaml更新、コミット、そして新しいタグを作成
        echo "pubspec.yaml を更新し、コミットとタグ付けを行います..."
        yq -i ".version = \"$NEW_FULL_VERSION\"" pubspec.yaml
        git add pubspec.yaml
        git commit -m "chore(release): バージョンを $NEW_VERSION に更新"
        git tag $TAG

        # 3. リリースノート用のコミットログを「タグ間」で取得
        echo "リリースノート用のコミットログを取得します..."
        # 新しく作ったタグの直前のタグを取得
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${TAG}^ 2>/dev/null)
        if [ -z "$PREVIOUS_TAG" ]; then
          # 直前のタグが見つからない場合 (最初のリリース) は、新しいタグまでの全ログを取得
          COMMIT_LOG=$(git log --pretty=format:"- %s" $TAG)
        else
          COMMIT_LOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${TAG})
        fi
        
        # 4. プロンプトを組み立ててリリースノートを生成
        echo "リリースノートを生成しています..."
        PROMPT=$(echo "{{.PROMPT_TEMPLATE}}" | sed -e "s/{{.COMMIT_LOG}}/$(echo "$COMMIT_LOG" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\n/g')/g" -e "s/{{.NOTES}}/{{.NOTES | default \"特にありません。\"}}/g")
        RELEASE_NOTES=$(gemini -p gemini --yolo --prompt "$PROMPT")
        if [ -z "$RELEASE_NOTES" ]; then
          echo "エラー: リリースノートの生成に失敗しました。"
          exit 1
        fi
        echo "リリースノートが正常に生成されました。"

        # 5. コミットとタグをリモートにプッシュ
        echo "コミットとタグをリモートにプッシュします..."
        git push origin HEAD
        git push origin $TAG

        # 6. Androidビルド
        echo "Android App Bundleをビルドしています..."
        fvm flutter build appbundle --release
        echo "ABIごとに分割されたAPKをビルドしています..."
        fvm flutter build apk --release --split-per-abi

        # 7. GitHubリリース作成
        echo "GitHubリリースを作成しています..."
        gh release create $TAG \
          --title "Release $TAG" \
          --notes "$RELEASE_NOTES" \
          build/app/outputs/bundle/release/app-release.aab \
          build/app/outputs/apk/release/app-*-release.apk
    preconditions:
      - sh: "command -v gh"
        msg: "GitHub CLI (gh) がインストールされていません。"
      - sh: "command -v fvm"
        msg: "FVM がインストールされていません。"
      - sh: "command -v gemini"
        msg: "@google/gemini-cli (gemini) がインストールされていません。"
      - sh: "command -v yq"
        msg: "yq がインストールされていません。pubspec.yamlを更新するためにインストールしてください。"}
