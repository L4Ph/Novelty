name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Semantic version increment'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      # 2. Generate GitHub App token
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # 3. Get GitHub App info
      - name: Get GitHub App info
        id: app_info
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          APP_SLUG=$(gh api /app --jq .slug)
          USER_ID=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)
          echo "app_slug=${APP_SLUG}" >> $GITHUB_OUTPUT
          echo "user_id=${USER_ID}" >> $GITHUB_OUTPUT

      # 4. Determine new version
      - name: Determine new version
        id: versions
        run: |
          PREVIOUS_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "v0.0.0")
          VERSION=${PREVIOUS_TAG#v}
          IFS='.' read -r -a V_PARTS <<< "$VERSION"

          SEMVER_TYPE="${{ github.event.inputs.semver }}"

          if [ "$SEMVER_TYPE" == "major" ]; then
            V_PARTS[0]=$((V_PARTS[0] + 1)); V_PARTS[1]=0; V_PARTS[2]=0
          elif [ "$SEMVER_TYPE" == "minor" ]; then
            V_PARTS[1]=$((V_PARTS[1] + 1)); V_PARTS[2]=0
          else
            V_PARTS[2]=$((V_PARTS[2] + 1))
          fi

          NEW_VERSION="${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}"
          NEW_TAG="v${NEW_VERSION}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      # 5. Get build number from pubspec.yaml
      - name: Get build number
        id: build_number
        run: |
          BUILD_NUMBER=$(yq '.version' pubspec.yaml | cut -d'+' -f2)
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      # 6. Create and push release branch
      - name: Create and push release branch
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          git config user.name "${{ steps.app_info.outputs.app_slug }}[bot]"
          git config user.email "${{ steps.app_info.outputs.user_id }}+${{ steps.app_info.outputs.app_slug }}[bot]@users.noreply.github.com"
          
          git checkout -b "release/${{ steps.versions.outputs.new_tag }}"
          
          yq -i '.version = "${{ steps.versions.outputs.new_version }}+${{ steps.build_number.outputs.build_number }}"' pubspec.yaml
          
          git add pubspec.yaml
          git commit -m "chore(release): prepare for version ${{ steps.versions.outputs.new_version }}"
          
          git push "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}" "release/${{ steps.versions.outputs.new_tag }}"

      # 7. Create Pull Request
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh pr create \
            --base main \
            --head "release/${{ steps.versions.outputs.new_tag }}" \
            --title "chore(release): Release ${{ steps.versions.outputs.new_tag }}" \
            --body "This PR prepares the release for version ${{ steps.versions.outputs.new_tag }}. Please review the changes and merge to trigger the release."
