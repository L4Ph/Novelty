name: Release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Semantic version increment'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: read

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Determine new version
      - name: Determine new version
        id: versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREVIOUS_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "v0.0.0")
          VERSION=${PREVIOUS_TAG#v}
          IFS='.' read -r -a V_PARTS <<< "$VERSION"

          SEMVER_TYPE="${{ github.event.inputs.semver }}"

          if [ "$SEMVER_TYPE" == "major" ]; then
            echo "Bumping major version"
            V_PARTS[0]=$((V_PARTS[0] + 1))
            V_PARTS[1]=0
            V_PARTS[2]=0
          elif [ "$SEMVER_TYPE" == "minor" ]; then
            echo "Bumping minor version"
            V_PARTS[1]=$((V_PARTS[1] + 1))
            V_PARTS[2]=0
          else # Default to patch
            echo "Bumping patch version"
            V_PARTS[2]=$((V_PARTS[2] + 1))
          fi

          NEW_VERSION="${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}"
          NEW_TAG="v${NEW_VERSION}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$NEW_VERSION" >> $GITHUB_ENV

      # 3. Update version in pubspec.yaml
      - name: Update version in pubspec.yaml
        run: yq -i '.version = "${{ steps.versions.outputs.new_version }}+${{ github.run_number }}"' pubspec.yaml

      # 4. Set up Flutter environment and build
      - name: Set up Flutter
        run: |
          curl -fsSL https://fvm.app/install.sh | bash
          fvm install
      - name: Get Flutter packages
        run: fvm flutter pub get
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "STORE_FILE=upload-keystore.jks" >> $GITHUB_ENV
      - name: Build Android Release Files
        run: |
          fvm flutter build apk --release --split-per-abi \
            --build-name=${{ env.VERSION_NAME }} \
            --build-number=${{ github.run_number }} \
            --dart-define=NOVELTY_API_URL=${{ secrets.NOVELTY_API_URL }}
          fvm flutter build appbundle --release \
            --build-name=${{ env.VERSION_NAME }} \
            --build-number=${{ github.run_number }} \
            --dart-define=NOVELTY_API_URL=${{ secrets.NOVELTY_API_URL }}
        env:
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          
      # 5. Tag and Push
      - name: Tag and Push
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git tag ${{ steps.versions.outputs.new_tag }}
          git push origin ${{ steps.versions.outputs.new_tag }}

      # 6. Create GitHub Release (as a draft)
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.versions.outputs.new_tag }}" \
            --title "Release ${{ steps.versions.outputs.new_tag }}" \
            --draft \
            build/app/outputs/bundle/release/app-release.aab \
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk \
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk \
            build/app/outputs/flutter-apk/app-x86_64-release.apk
